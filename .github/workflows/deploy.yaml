name: Build and Deploy


on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  wireguard_setup:
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt-get update && sudo apt-get install -y wireguard traceroute
      
      - name: traceroute BME
        run: traceroute 152.66.245.136

      - name: Setup WireGuard with private key
        run: |
          echo "${{ secrets.WIREGUARD_PRIVATE_KEY }}" > privatekey
          chmod 600 privatekey

      - name: Create WireGuard interface
        run: sudo ip link add dev wg0 type wireguard
        
      - name: Set IP address
        run: sudo ip address add dev wg0 10.200.200.3/24

      - name: Configure WireGuard with persistent keepalive
        run: |
          sudo wg set wg0 \
            listen-port 51820 \
            private-key privatekey \
            peer ${{ secrets.WIREGUARD_SERVER_PUBKEY }} \
            allowed-ips 10.200.200.0/24,192.168.100.0/24 \
            endpoint ${{ secrets.WIREGUARD_SERVER_ENDPOINT }} \
            persistent-keepalive 25

      - name: Activate interface
        run: sudo ip link set up dev wg0

      - name: Add route for subnet (only if needed)
        run: |
          # Only add routes that don't exist
          if ! ip route | grep -q "192.168.100.0/24"; then
            sudo ip route add 192.168.100.0/24 dev wg0 || echo "Route already exists"
          fi

      - name: Debug WireGuard Connection
        run: |
          echo "WireGuard status:"
          sudo wg show
          
          echo "Network interfaces:"
          ip addr
          
          echo "Routing table:"
          ip route
          
          echo "Testing connection to WireGuard server:"
          sudo ping -c 4 10.200.200.1 || echo "Ping failed"
          
          echo "Checking UDP connectivity:"
          nc -vzu $(echo "${{ secrets.WIREGUARD_SERVER_ENDPOINT }}" | cut -d: -f1) $(echo "${{ secrets.WIREGUARD_SERVER_ENDPOINT }}" | cut -d: -f2) || echo "UDP connectivity test failed"
          
          echo "Checking connectivity with traceroute:"
          sudo traceroute 10.200.200.1 || echo "Traceroute failed"

  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}:${{ github.sha }}
        
    - name: Install Wireguard
      run: |
        sudo apt-get update
        sudo apt-get install -y wireguard

    - name: Setup Wireguard
      run: |
        echo "${{ secrets.WIREGUARD_CONFIG }}" > /tmp/wg0.conf
        sudo cp /tmp/wg0.conf /etc/wireguard/wg0.conf
        sudo chmod 600 /etc/wireguard/wg0.conf
        sudo wg-quick up wg0
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Create kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml
      
    - name: Update deployment image
      run: |
        sed -i "s|\${GITHUB_REPOSITORY}:\${GITHUB_SHA}|ghcr.io/${{ github.repository }}:${{ github.sha }}|" kubernetes/deployment.yaml


    - name: Debug WireGuard Connection
      run: |
        echo "WireGuard status:"
        sudo wg show
        
        echo "Network interfaces:"
        ip a
        
        echo "Routing table:"
        ip route
        
        echo "Testing connection to WireGuard server:"
        sudo ping -c 4 10.200.200.1 || echo "Ping failed"
        
        echo "Checking UDP connectivity:"
        sudo nc -vzu 152.66.245.136 51820
        
        echo "WireGuard logs:"
        sudo journalctl -xeu wg-quick@wg0.service      

    - name: Verify Wireguard and Kubernetes connectivity
      run: |
        # Check network interfaces
        echo "Checking network interfaces:"
        ip addr show
        
        # Check routing
        echo -e "\nChecking routes:"
        ip route
        
        # Try to ping Kubernetes API server
        echo -e "\nPinging Kubernetes API server:"
        ping -c 3 10.200.200.1 || echo "Ping failed but continuing"
        
        # Check if we can reach the API server
        echo -e "\nChecking API server connectivity with curl:"
        curl -k -v https://10.200.200.1:6443/version || echo "Curl failed but continuing"
        
        # Test kubectl connectivity with basic commands
        echo -e "\nTesting kubectl connectivity:"
        kubectl --kubeconfig=kubeconfig.yaml version
        kubectl --kubeconfig=kubeconfig.yaml get namespaces
      
    - name: Deploy to Kubernetes
      run: |
        kubectl --kubeconfig=kubeconfig.yaml apply -f kubernetes/deployment.yaml --validate=false
        kubectl --kubeconfig=kubeconfig.yaml apply -f kubernetes/service.yaml --validate=false
        
    - name: Wait for deployment
      run: |
        kubectl --kubeconfig=kubeconfig.yaml rollout status deployment/photo-album-app
        
    - name: Display service info
      run: |
        kubectl --kubeconfig=kubeconfig.yaml get svc photo-album-app -o wide
        
    - name: Clean up Wireguard
      if: always()
      run: |
        sudo wg-quick down wg0 || true
